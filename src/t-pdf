#!/usr/bin/env python3

import os
import sys
import time
import numpy
import orjson
import skimage
import argparse

from tpdf import pseg, docmt, helper, aggr


def _run_page(debug_dir, image, content, page, doc_meta={}):
    results = pseg.parse(image)
    target_scale = results['target_scale']
    columns = results['columns']
    spacings = results['spacings']
    column_row_groups = results['column_row_groups']
    column_row_vspacings = results['column_row_vspacings']
    column_row_grp_row_spacings = results['column_row_grp_row_spacings']
    column_row_grp_vlines = results['column_row_grp_vlines']
    column_row_grp_build_table = results.get('column_row_grp_build_table', {})
    column_row_grp_cells = results.get('column_row_grp_cells', {})

    (tables, used_words) = aggr.collect_tables(results, content, doc_meta)
    text_boxes = aggr.collect_text(results, content, doc_meta, used_words)

    all_contents = text_boxes + tables
    all_contents = sorted(all_contents, key=lambda all_contents:all_contents['box'][0] * 10000 + all_contents['box'][1])

    if debug_dir:
        debug_img = skimage.color.gray2rgb(results['im_bin_clear'])
        # columns_from_image
        test_img = numpy.array(debug_img)
        pseg.debug_painter.columns_from_image(test_img, (columns, spacings))
        ofn = os.path.join(debug_dir, '{}.{}.debug.01_columns_from_image.png'.format(os.path.basename(args.input), page))
        skimage.io.imsave(ofn, test_img)
        # row_groups_from_columns
        test_img = numpy.array(debug_img)
        pseg.debug_painter.row_groups_from_columns(test_img, (columns, column_row_groups, column_row_vspacings))
        ofn = os.path.join(debug_dir, '{}.{}.debug.02_row_groups_from_columns.png'.format(os.path.basename(args.input), page))
        skimage.io.imsave(ofn, test_img)
        # row_hspacings_from_row_groups
        test_img = numpy.array(debug_img)
        pseg.debug_painter.row_hspacings_from_row_groups(test_img, (columns, column_row_groups, column_row_grp_row_spacings))
        ofn = os.path.join(debug_dir, '{}.{}.debug.03_row_hspacings_from_row_groups.png'.format(os.path.basename(args.input), page))
        skimage.io.imsave(ofn, test_img)
        # vertical_lines_from_hspacings
        test_img = numpy.array(debug_img)
        pseg.debug_painter.vertical_lines_from_hspacings(test_img, (columns, column_row_groups, column_row_grp_row_spacings, column_row_grp_vlines))
        ofn = os.path.join(debug_dir, '{}.{}.debug.04_vertical_lines_from_hspacings.png'.format(os.path.basename(args.input), page))
        skimage.io.imsave(ofn, test_img)
        # tablevspan series
        for key, fresult in results['column_row_grp_tablevspan'].items():
            helper.reset_color_cycle()
            test_img = numpy.array(debug_img)
            pseg.debug_painter.tablevspan_common(test_img, (columns, column_row_groups, column_row_grp_row_spacings, fresult))
            ofn = os.path.join(debug_dir, '{}.{}.debug.05_tablevspan{}.png'.format(os.path.basename(args.input), page, key))
            skimage.io.imsave(ofn, test_img)
        # build table
        test_img = numpy.array(debug_img)
        pseg.debug_painter.tablevspan_build_table(test_img, (columns, column_row_groups, column_row_grp_row_spacings, column_row_grp_build_table))
        ofn = os.path.join(debug_dir, '{}.{}.debug.05_tablevspan06_build_table.png'.format(os.path.basename(args.input), page))
        skimage.io.imsave(ofn, test_img)
        # cells
        test_img = numpy.array(debug_img)
        pseg.debug_painter.tablevspan_find_intersections_find_cells(test_img, (columns, column_row_groups, column_row_grp_row_spacings, column_row_grp_cells))
        ofn = os.path.join(debug_dir, '{}.{}.debug.05_tablevspan07_find_intersections_find_cells.png'.format(os.path.basename(args.input), page))
        skimage.io.imsave(ofn, test_img)
        # final result
        for (ymin, xmin, ymax, xmax) in results.get('text_boxes', []):
            ymin *= target_scale
            xmin *= target_scale
            ymax *= target_scale
            xmax *= target_scale
            rr, cc = skimage.draw.rectangle((int(ymin), int(xmin)), (int(ymax), int(xmax)))
            skimage.draw.set_color(image, (rr, cc), helper.get_color_cycle_rgb(), 0.3)
        ofn = os.path.join(debug_dir, '{}.{}.debug.parse.jpg'.format(os.path.basename(args.input), page))
        skimage.io.imsave(ofn, image)

    return {
        'page':     page,
        'width':    results.get('width', 0),
        'height':   results.get('height', 0),
        'content':  all_contents
    }


def main(args):
    if args.input.lower().endswith('.pdf'):
        doc_meta = docmt.get_info(args.input)
        if args.page:
            if ',' in args.page:
                pages = [int(x) for x in args.page.split(',')]
            elif '-' in args.page:
                (page_left, page_right) = args.page.split('-')
                pages = range(int(page_left), int(page_right) + 1)
            else:
                pages = [int(args.page)]
        else:
            pages = range(1, doc_meta['pages'] + 1)
        print('processing document {}, {} pages ...'.format(os.path.basename(args.input), len(pages)), flush=True)
        doc = {
            'meta': {},
            'pages': []
        }
        doc['meta'].update(doc_meta)
        checkpoint = time.time()
        for page_idx, page in enumerate(pages):
            image = docmt.load_page_image(args.input, page)
            content = docmt.load_page_content(args.input, page)
            rpage = _run_page(args.debug, image, content, page, doc_meta)
            if args.output:
                os.makedirs(args.output, exist_ok=True)
                json_fn = os.path.join(args.output, 'page.{}.json'.format(page))
                with open(json_fn, 'wb') as f:
                    f.write(orjson.dumps(rpage, option=orjson.OPT_SERIALIZE_NUMPY))
            doc['pages'].append(rpage)
            if args.verbose:
                from colorama import Fore, Back, Style
                from texttable import Texttable
                indent = ' ' * 2
                print(Fore.WHITE + Style.BRIGHT + '--------------- page {} ---------------'.format(rpage['page']) + Style.RESET_ALL)
                for e in rpage['content']:
                    if e['type'] == 'text':
                        print(Fore.GREEN + Style.BRIGHT + 'text' + Style.DIM, 'at', e['box'], Style.RESET_ALL)
                        print('{}{}'.format(indent, e['content']))
                    elif e['type'] == 'table':
                        print(Fore.CYAN + Style.BRIGHT + 'table' + Style.DIM, 'at', e['box'], Style.RESET_ALL)
                        table_ = Texttable(max_width=(os.get_terminal_size()[0] - len(indent)))
                        table_.set_deco(Texttable.BORDER | Texttable.VLINES)
                        table_.add_rows(e['content'])
                        print('\n'.join([indent + x for x in table_.draw().split('\n')]))
            else:
                if time.time() - checkpoint > 10:
                    print('- {} of {} pages processed'.format(page_idx + 1, len(pages)), flush=True)
                    checkpoint = time.time()
        if args.output:
            os.makedirs(args.output, exist_ok=True)
            json_fn = os.path.join(args.output, 'pdf.json')
            with open(json_fn, 'wb') as f:
                f.write(orjson.dumps(doc, option=orjson.OPT_SERIALIZE_NUMPY))
    else:
        image = skimage.io.imread(args.input)
        _run_page(args.debug, image, {}, '_')


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='t-pdf utility translates a pdf file into a program-friendly structure')
    parser.add_argument('-i', '--input', type=str, required=True, help='input pdf path file name, supply an image file to run on a single image page')
    parser.add_argument('-o', '--output', type=str, help='output directory for structure and images')
    parser.add_argument('-p', '--page', type=str, help='process a particular page')
    parser.add_argument('-d', '--debug', type=str, help='specify output directory for debug image output')
    parser.add_argument('-v', '--verbose', action='store_true', help='print verbose document content during translation')
    args = parser.parse_args()
    main(args)
